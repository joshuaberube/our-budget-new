import { useState } from 'react'
import { useRouter } from 'next/router'
import Head from 'next/head'
import { createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth'
import { logEvent } from 'firebase/analytics'
import useFirebase from '../hooks/useFirebase'
import useToggle from '../hooks/useToggle'
import EnvelopeIcon from '../assets/icons/EnvelopeIcon'
import LockIcon from '../assets/icons/LockIcon'
import EyeIcon from '../assets/icons/EyeClosedIcon'

const Auth = () => {
  const [isUserLoggingIn, toggleIsUserLoggingIn] = useToggle(true)
  const [isUserInForgotPassword, toggleIsUserInForgotPassword] = useToggle(false)
  const [isPasswordVisible, toggleIsPasswordVisible] = useToggle(false)
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState(null)
  const { auth, analytics } = useFirebase()
  const router = useRouter()

  const loginOrSignupText = isUserLoggingIn ? 'Login' : 'Sign Up'

  const onSubmitHandler = async e => {
    e.preventDefault()

    // if (isUserInForgotPassword) {
    //   const test = await sendPasswordResetEmail(auth, email)
    //   .catch(err => console.error(err))
    //   return
    // }

    try {
      const userCredential = isUserLoggingIn 
        ? await signInWithEmailAndPassword(auth, email, password) 
        : await createUserWithEmailAndPassword(auth, email, password)
  
      if (userCredential) {
        logEvent(analytics, isUserLoggingIn ? 'login' : 'sign_up', { method: 'emailAndPassword'})
        router.push('/')
      }
    } catch (err) {
      switch(err.code) {
        case 'auth/user-not-found':
          setError('Invalid email or password')
        case 'auth/email-already-exists':
          setError('A user with that email already exists')
      }
    }
  }

  const inputs = [
    {Icon: EnvelopeIcon, type: 'email', label: 'Email', value: email, setState: setEmail, autoComplete: 'email'},
    {Icon: LockIcon, alt: 'Lock Icon', type: 'password', label: 'Password', value: password, setState: setPassword, autoComplete: isUserLoggingIn ? 'current-password' : 'new-password'}
  ]
  const mapInputs = isUserInForgotPassword ? inputs.splice(0, 1) : inputs

  const inputsMapped = mapInputs.map(({Icon, type, label, value, setState, autoComplete}) => {
    const onChangeHandler = e => setState(e.target.value)

    const specialType = type === 'password' 
      ? isPasswordVisible 
        ? 'text' 
        : 'password' 
      : 'email'
    
    return (
      <div key={type} className="px-4 py-2 bg-white text-gray-500 w-80 flex flex-row items-center rounded-md mt-4 focus-within:text-gray-500 dark:bg-black dark:text-gray-300 dark:focus-within:text-gray-50">
        <Icon />
        <input
          className="placeholder-current bg-transparent ml-2 w-full focus:outline-none dark:placeholder-current"
          type={specialType}
          placeholder={label}
          aria-label={label} 
          value={value} 
          onChange={onChangeHandler}
          autoComplete={autoComplete}
        />
        {type === 'password' && (
          <button type="button" title={isPasswordVisible ? 'Hide Password' : 'Show Password'} onClick={toggleIsPasswordVisible}>
            <EyeIcon isEyeClosed={isPasswordVisible} />
          </button>
        )}
      </div>
    )
  })

  return (
    <div>
      <Head>
        <title>Budgewit | {loginOrSignupText}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="w-screen h-screen flex justify-center items-center bg-white dark:bg-black">
        <section className="bg-gray-100 flex items-center justify-center p-12 rounded-xl dark:bg-gray-800">
          <fieldset>
            <legend className="mb-2 text-2xl font-medium text-gray-800 dark:text-gray-100">{isUserLoggingIn ? 'Login to Budgewit' : 'Create Account'}</legend>
            <form onSubmit={onSubmitHandler}>
              <div className="flex flex-col">
                {inputsMapped}
              </div>
              <div className="flex flex-row items-end justify-between mt-8">
                <input 
                  type="button" 
                  className="bg-transparent text-sm cursor-pointer text-gray-700 dark:text-gray-100 focus:underline focus:outline-none focus:text-gray-200"
                  value={isUserLoggingIn ? 'Need an account?' : 'Already have an account?'} 
                  onClick={toggleIsUserLoggingIn}
                />
                <button 
                  type="submit" 
                  className="bg-green-500 px-8 py-2 rounded-md text-white text-md font-medium dark:bg-green-600 focus:outline-none focus:bg-green-800 active:bg-green-800"
                >
                  {loginOrSignupText}
                </button>
              </div>
              {/* {isUserLoggingIn && (
                <input 
                  type="button" 
                  value="Forgot your password?" 
                  onClick={toggleIsUserInForgotPassword} 
                />
              )} */}
            </form>
          </fieldset>
        </section>
      </main>
    </div>
  )
}

export default Auth
